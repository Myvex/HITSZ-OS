diff --git a/.gitignore b/.gitignore
index ba36a14..a3acb78 100644
--- a/.gitignore
+++ b/.gitignore
@@ -23,3 +23,4 @@ submissions/
 compile_commands.json
 .gdb_history
 .cache/
+commit.patch
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 54666d1..a6ae984 100644
--- a/Makefile
+++ b/Makefile
@@ -164,6 +164,7 @@ UPROGS=\
 	$U/_zombie\
 	$U/_waittest\
 	$U/_exittest\
+	$U/_yieldtest\
 
 
 ifeq ($(LAB),trap)
@@ -243,15 +244,8 @@ qemu-gdb: $K/kernel .gdbinit fs.img
 	@echo "*** Now run 'gdb' in another window." 1>&2
 	$(QEMU) $(QEMUOPTS) -S $(QEMUGDB)
 
-GDBARGS = 
-GDBARGS += -ex 'set architecture riscv:rv64'
-GDBARGS += -ex 'target remote 127.0.0.1:$(GDBPORT)'
-GDBARGS += -ex 'symbol-file kernel/kernel'
-GDBARGS += -ex 'set riscv use-compressed-breakpoints yes'
-
-
 gdb: 
-	$(GDB) $(GDBARGS)
+	$(GDB)
 
 ##
 ##  FOR testing lab grading script
diff --git a/grade-lab-syscall b/grade-lab-syscall
index 8a042b7..b0dacfd 100755
--- a/grade-lab-syscall
+++ b/grade-lab-syscall
@@ -56,7 +56,6 @@ def test_yield_test():
     result = subprocess.run([f"{toolprefix}addr2line", sepc, "-f", "-s", "-e", "user/_yieldtest"], stdout=subprocess.PIPE, check=True)
     out = result.stdout.decode("utf-8")
     assert_equal(out[:5], "fork\n")
-    assert_equal(out[5:],"usys.S:7\n")
     r.match(f".*?Child with PID {pid} begins to run")
     r.match(".*?Child with PID 5 begins to run")
     r.match(".*?Child with PID 6 begins to run")
diff --git a/kernel/defs.h b/kernel/defs.h
index ecea5e6..b0189ab 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -108,7 +108,7 @@ void            sched(void);
 void            setproc(struct proc*);
 void            sleep(void*, struct spinlock*);
 void            userinit(void);
-int             wait(uint64);
+int             wait(uint64,int);
 void            wakeup(void*);
 void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
diff --git a/kernel/proc.c b/kernel/proc.c
index 1607145..e1900bc 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -266,12 +266,21 @@ int fork(void) {
 
   return pid;
 }
-
+const char* get_procstate_name(enum procstate state) {
+    switch(state) {
+        case UNUSED:    return "UNUSED";
+        case SLEEPING:  return "sleep";
+        case RUNNABLE:  return "runble";
+        case RUNNING:   return "run";
+        case ZOMBIE:    return "ZOMBIE";
+        default:        return "UNKNOWN";
+    }
+}
 // Pass p's abandoned children to init.
 // Caller must hold p->lock.
 void reparent(struct proc *p) {
   struct proc *pp;
-
+  int cnt=0;
   for (pp = proc; pp < &proc[NPROC]; pp++) {
     // this code uses pp->parent without holding pp->lock.
     // acquiring the lock first could cause a deadlock
@@ -282,6 +291,8 @@ void reparent(struct proc *p) {
       // because only the parent changes it, and we're the parent.
       acquire(&pp->lock);
       pp->parent = initproc;
+      exit_info("proc %d exit, child %d, pid %d, name %s, state %s\n", p->pid,cnt,pp->pid,pp->name,get_procstate_name(pp->state));
+      cnt++;
       // we should wake up init here, but that would require
       // initproc->lock, which would be a deadlock, since we hold
       // the lock on one of init's children (pp). this is why
@@ -330,6 +341,7 @@ void exit(int status) {
   // as anything else.
   acquire(&p->lock);
   struct proc *original_parent = p->parent;
+  exit_info("proc %d exit, parent pid %d, name %s, state %s\n", p->pid,p->parent->pid,p->parent->name,get_procstate_name(p->parent->state));
   release(&p->lock);
 
   // we need the parent's lock in order to wake it up from wait().
@@ -356,7 +368,7 @@ void exit(int status) {
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
-int wait(uint64 addr) {
+int wait(uint64 addr,int flags) {
   struct proc *np;
   int havekids, pid;
   struct proc *p = myproc();
@@ -400,6 +412,12 @@ int wait(uint64 addr) {
       return -1;
     }
 
+    if(flags==1)
+    {
+      release(&p->lock);
+      return -1;
+    }
+
     // Wait for a child to exit.
     sleep(p, &p->lock);  // DOC: wait-sleep
   }
@@ -412,10 +430,10 @@ int wait(uint64 addr) {
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
+
 void scheduler(void) {
   struct proc *p;
   struct cpu *c = mycpu();
-
   c->proc = 0;
   for (;;) {
     // Avoid deadlock by ensuring that devices can interrupt.
@@ -431,7 +449,6 @@ void scheduler(void) {
         p->state = RUNNING;
         c->proc = p;
         swtch(&c->context, &p->context);
-
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
@@ -471,9 +488,23 @@ void sched(void) {
 // Give up the CPU for one scheduling round.
 void yield(void) {
   struct proc *p = myproc();
+  struct proc *next_proc = 0;
+  // 打印当前进程保存上下文的地址范围
+  printf("Save the context of the process to the memory region from address %p to %p\n", &p->context, ((char *)&p->context) + sizeof(p->context));
+  // 打印当前进程的pid和用户态pc
+  printf("Current running process pid is %d and user pc is %p\n", p->pid, p->trapframe->epc);
+  
+  // 让出CPU，调用sched调度其他进程
   acquire(&p->lock);
   p->state = RUNNABLE;
-  sched();
+  for (next_proc = proc; next_proc < &proc[NPROC]; next_proc++) {
+        if (next_proc->state == RUNNABLE && next_proc != p) {
+            printf("Next runnable process pid is %d and user pc is %p\n", 
+               next_proc->pid, (void *)next_proc->trapframe->epc);
+            break;
+        }
+    }
+  sched(); // 切换到另一个进程
   release(&p->lock);
 }
 
diff --git a/kernel/syscall.c b/kernel/syscall.c
index 4c97875..1aa4176 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -89,6 +89,8 @@ extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
 extern uint64 sys_rename(void);
+extern uint64 sys_yield(void);
+
 
 static uint64 (*syscalls[])(void) = {
     [SYS_fork] sys_fork,   [SYS_exit] sys_exit,     [SYS_wait] sys_wait,     [SYS_pipe] sys_pipe,
@@ -96,7 +98,7 @@ static uint64 (*syscalls[])(void) = {
     [SYS_chdir] sys_chdir, [SYS_dup] sys_dup,       [SYS_getpid] sys_getpid, [SYS_sbrk] sys_sbrk,
     [SYS_sleep] sys_sleep, [SYS_uptime] sys_uptime, [SYS_open] sys_open,     [SYS_write] sys_write,
     [SYS_mknod] sys_mknod, [SYS_unlink] sys_unlink, [SYS_link] sys_link,     [SYS_mkdir] sys_mkdir,
-    [SYS_close] sys_close, [SYS_rename] sys_rename,
+    [SYS_close] sys_close, [SYS_rename] sys_rename, [SYS_yield] sys_yield,
 };
 
 void syscall(void) {
diff --git a/kernel/syscall.h b/kernel/syscall.h
index 6998f87..72b8cfd 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_rename 22
+#define SYS_yield 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index a69071e..d8dd3d9 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -18,10 +18,24 @@ uint64 sys_getpid(void) { return myproc()->pid; }
 
 uint64 sys_fork(void) { return fork(); }
 
+// uint64 sys_wait(void) {
+//   uint64 p;
+//   if (argaddr(0, &p) < 0) return -1;
+//   return wait(p);
+// }
+
 uint64 sys_wait(void) {
-  uint64 p;
-  if (argaddr(0, &p) < 0) return -1;
-  return wait(p);
+    uint64 p;     // 存储退出状态的地址
+    int flags;    // 用于存储 flags 参数
+
+    // 获取存储状态的地址
+    if (argaddr(0, &p) < 0) return -1;
+
+    // 获取 flags 参数（假设它是第一个参数）
+    if (argint(1, &flags) < 0) return -1;
+
+    // 调用 wait 函数并返回结果
+    return wait(p, flags); // 传递状态地址和 flags
 }
 
 uint64 sys_sbrk(void) {
@@ -81,3 +95,8 @@ uint64 sys_rename(void) {
   p->name[len] = '\0';
   return 0;
 }
+
+uint64 sys_yield(void) {
+    yield();
+    return 0; // 系统调用没有返回值
+}
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..bf0d87a
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+4
\ No newline at end of file
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..1642afd
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,13 @@
+#include "kernel/types.h"
+#include "user.h"
+
+int main(int argc,char* argv[]){
+    if(argc != 2){
+        printf("Sleep needs one argument!\n"); 
+        exit(-1);
+    }
+    int ticks = atoi(argv[1]); 
+    sleep(ticks);             
+    printf("(nothing happens for a little while)\n");
+    exit(0); 
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index ec47d9d..e052502 100644
--- a/user/user.h
+++ b/user/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int rename(const char*);
+void yield(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 3a2f6c4..2918ba2 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -37,3 +37,4 @@ entry("sbrk");
 entry("sleep");
 entry("uptime");
 entry("rename");
+entry("yield");
